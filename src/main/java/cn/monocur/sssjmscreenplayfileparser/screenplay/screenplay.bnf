{
  parserClass="cn.monocur.sssjmscreenplayfileparser.screenplay.parser.GettingScreenplayScriptParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="GettingScreenplayScript"
  psiImplClassSuffix="Impl"
  psiPackage="cn.monocur.sssjmscreenplayfileparser.screenplay.psi"
  psiImplPackage="cn.monocur.sssjmscreenplayfileparser.screenplay.psi.impl"

  elementTypeHolderClass="cn.monocur.sssjmscreenplayfileparser.screenplay.psi.GettingScreenplayScriptTypes"
  elementTypeClass="cn.monocur.sssjmscreenplayfileparser.screenplay.psi.GettingScreenplayScriptElementType"
  tokenTypeClass="cn.monocur.sssjmscreenplayfileparser.screenplay.psi.GettingScreenplayScriptTokenType"

    tokens=[
            // 分隔符
            HYPHEN='-'  // 添加连字符 token
            EQUALS='='  // 添加等号 token
            SEMICOLON=';'  // 添加分号 token
            COLON=':'   // 添加冒号 token
            COMMA=','

            L_CURLY='{'
            R_CURLY='}'
            L_BRACKET='['
            R_BRACKET=']'

            VAR_PREFIX='$'
            HASH='#'
            POINT_TO="->"

            DOUBLE_QUOTED_STRING="regexp:\"([^\\\"\r\n]|\\[^\r\n])*\"?"
            SINGLE_QUOTED_STRING="regexp:'([^\\\'\r\n]|\\[^\r\n])*'?"
            NUMBER='regexp:-?(0|[1-9]\d*)(\.\d+)?([eE][+-]?\d*)?'

            TRUE='true'
            FALSE='false'
            NULL='null'

            // 字的定义
            // 修改为不以数字开头的单词
            ALPHABET="regexp:[a-zA-Z_][a-zA-Z_0-9 ,.!?]*"
            // Json特供，不好乱动
            IDENTIFIER="testComment"
            // 通用字符
            WORD="regexp:[^\s:;=\-\"\'\[\]\{\}$#,.-/]*"

            // 注解与空白
            SPACE='regexp:\s+'
            LINE_COMMENT='regexp://.*'
            BLOCK_COMMENT='regexp:/\*([^*]|\*+[^*/])*(\*+/)?'

        ]

        extends("container|literal|reference_expression")=value
        extends("array|object")=container
        extends("string_literal|number_literal|boolean_literal|null_literal")=literal
}

screenplay ::= (comment | screenplayConfig)? (comment | command)* comment?

command ::= commandName mainParam? comment? subParams? semicolon
{
    pin=1
    recoverWhile=cmdRecover
}

private cmdRecover ::= !(semicolon | alphabet | generalWord | hash | comment)

commandName     ::= (alphabet | generalWord)
mainParam       ::= colon content
subParams       ::= subParam+
subParam        ::= (hyphen subParamKey) subParamValue? { recoverWhile=param_Recover }
subParamKey     ::= alphabet
subParamValue   ::= equals (option | content)
private param_Recover ::= !(semicolon | alphabet | hyphen | comment)

private comment ::= line_comment | block_comment

private content ::= (number | word | variable | json)
private word ::= ( alphabet | double_quoted_string | generalWord ) variable? ( alphabet | double_quoted_string | generalWord )?

screenplayConfig ::= hash (word | json)? hash
{
    pin=1
    recoverWhile=screenplayConfig_Recover
}
private screenplayConfig_Recover ::= !(hash | alphabet | semicolon |generalWord)

// [->target]格式
option ::= optionTarget optionContent
optionTarget ::= l_bracket point_to alphabet r_bracket
{
    pin=1
    recoverWhile=optionTarget_Recover
}
optionContent ::= word
private optionTarget_Recover ::= !(l_bracket | r_bracket | optionContent)

variable ::= l_curly var_prefix "Base."? alphabet r_curly
{
    pin=2
}
private isVariable ::= VAR_PREFIX

// 根规则：允许空文件或包含 JSON 值
json ::= value*

private object ::= '{' object_element* '}'
{
  pin=1
}

private object_element ::= property (','|&'}') {
  pin = 1
  recoverWhile = not_brace_or_next_value
}

private property_value ::= value

private property ::= property_name (':' property_value)
{
  pin(".*")=1
}

private property_name ::= literal | reference_expression

private array ::= '[' array_element* ']'
{
  pin=1
}

private private array_element ::= value (','|&']') {
  recoverWhile = not_bracket_or_next_value
  pin=1
}

private string_literal ::= SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING
private number_literal ::= NUMBER
private boolean_literal ::= TRUE | FALSE
private null_literal ::= NULL

private literal ::= string_literal | number_literal | boolean_literal | null_literal

private fake container ::=

private reference_expression ::= ALPHABET

private value ::= object | array | literal | reference_expression

// Recoveries
private not_bracket_or_next_value ::= !(']'|value)
private not_brace_or_next_value ::= !('}'|value)

private hyphen::=HYPHEN
private equals::=EQUALS
private semicolon::=SEMICOLON
private colon::=COLON
private comma::=COMMA
private l_curly::=L_CURLY
private r_curly::=R_CURLY
private l_bracket::=L_BRACKET
private r_bracket::=R_BRACKET
private var_prefix::=VAR_PREFIX
private hash::=HASH
private point_to::=POINT_TO
private double_quoted_string::=DOUBLE_QUOTED_STRING
private single_quoted_string::=SINGLE_QUOTED_STRING
private number::=NUMBER
private true::=TRUE
private false::=FALSE
private null::=NULL
private alphabet::=ALPHABET
private identifier::=IDENTIFIER
private generalWord::=WORD
private line_comment::=LINE_COMMENT
private block_comment::=BLOCK_COMMENT
