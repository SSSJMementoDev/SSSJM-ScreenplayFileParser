{
    tokens=[
            // 分隔符
            HYPHEN='-'  // 添加连字符 token
            EQUALS='='  // 添加等号 token
            SEMICOLON=';'  // 添加分号 token
            COLON=':'   // 添加冒号 token
            COMMA=','

            L_CURLY='{'
            R_CURLY='}'
            L_BRACKET='['
            R_BRACKET=']'

            VAR_PREFIX='$'
            HASH='#'
            POINT_TO="->"

            DOUBLE_QUOTED_STRING="regexp:\"([^\\\"\r\n]|\\[^\r\n])*\"?"
            SINGLE_QUOTED_STRING="regexp:'([^\\\'\r\n]|\\[^\r\n])*'?"
            NUMBER='regexp:-?(0|[1-9]\d*)(\.\d+)?([eE][+-]?\d*)?'

            TRUE='true'
            FALSE='false'
            NULL='null'

            // 字的定义
            // 修改为不以数字开头的单词
            ALPHABET="regexp:[a-zA-Z_][a-zA-Z_0-9 ,.!?]*"
            // Json特供，不好乱动
            IDENTIFIER="regexp:[[:jletterdigit:]~!()*\-./@\^<>=]+"
            // 通用字符
            WORD="regexp:[^\s:;=\-\"\'\[\]\{\}$#,.-]*"

            // 注解与空白
            SPACE='regexp:\s+'
            LINE_COMMENT='regexp://.*'
            BLOCK_COMMENT='regexp:/\*([^*]|\*+[^*/])*(\*+/)?'

        ]

        extends("container|literal|reference_expression")=value
        extends("array|object")=container
        extends("string_literal|number_literal|boolean_literal|null_literal")=literal
}

screenplay ::= comment? (comment | screenplayConfig | command)* comment?

command ::= commandName COLON? mainParam? subParams? SEMICOLON
{
    pin=1
    recoverWhile=cmdRecover
}

private cmdRecover ::= !(SEMICOLON | ALPHABET | HASH | comment)

commandName     ::= ALPHABET
mainParam       ::= content
subParams       ::= subParam+
subParam        ::= (HYPHEN subParamKey) subParamValue? { recoverWhile=param_Recover }
subParamKey     ::= ALPHABET
subParamValue   ::= EQUALS (option | content)
private param_Recover ::= !(SEMICOLON | ALPHABET | HYPHEN | comment)

private comment ::= LINE_COMMENT | BLOCK_COMMENT

private content ::= (number | word | variable | json)
private word ::= ( ALPHABET | DOUBLE_QUOTED_STRING | WORD ) variable? ( ALPHABET | DOUBLE_QUOTED_STRING | WORD )?
private number ::= NUMBER

screenplayConfig ::= HASH (word | json)? HASH
{
    pin=1
    recoverWhile=screenplayConfig_Recover
}
private screenplayConfig_Recover ::= !(HASH | ALPHABET | SEMICOLON)

// [->target]格式
option ::= optionTarget optionContent
optionTarget ::= L_BRACKET POINT_TO ALPHABET R_BRACKET
{
    pin=1
    recoverWhile=optionTarget_Recover
}
optionContent ::= word
private optionTarget_Recover ::= !(L_BRACKET | R_BRACKET | optionContent)

variable ::= L_CURLY VAR_PREFIX "Base."? ALPHABET R_CURLY
{
    pin=2
}
private isVariable ::= VAR_PREFIX

// 根规则：允许空文件或包含 JSON 值
json ::= value*

private object ::= '{' object_element* '}'
{
  pin=1
}

private object_element ::= property (','|&'}') {
  pin = 1
  recoverWhile = not_brace_or_next_value
}

private property_value ::= value

private property ::= property_name (':' property_value)
{
  pin(".*")=1
}

private property_name ::= literal | reference_expression

private array ::= '[' array_element* ']'
{
  pin=1
}

private private array_element ::= value (','|&']') {
  recoverWhile = not_bracket_or_next_value
  pin=1
}

private string_literal ::= SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING
private number_literal ::= NUMBER
private boolean_literal ::= TRUE | FALSE
private null_literal ::= NULL

private literal ::= string_literal | number_literal | boolean_literal | null_literal

private fake container ::=

private reference_expression ::= IDENTIFIER

private value ::= object | array | literal | reference_expression

// Recoveries
private not_bracket_or_next_value ::= !(']'|value)
private not_brace_or_next_value ::= !('}'|value)
