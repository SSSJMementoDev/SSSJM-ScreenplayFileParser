{
    tokens=[
        // 分隔符
        HYPHEN='-'  // 添加连字符 token
        COLON=':'   // 添加冒号 token
        EQUALS='='  // 添加等号 token
        SEMICOLON=';'  // 添加分号 token
        COMMA=','

        L_CURLY='{'
        R_CURLY='}'
        L_BRACKET='['
        R_BRACKET=']'

        VAR_PREFIX='$'
        HASH='#'
        POINT_TO="->"

        TRUE='true'
        FALSE='false'
        NULL='null'

        // 双引号字符串，以支持转义
        STRING="regexp:\"([^\"\\]|\\.)*\""
        // 字的定义
        NUMBER='regexp:-?(0|[1-9]\d*)(\.\d+)?([eE][+-]?\d*)?'
        // 修改为不以数字开头的单词
        ALPHABET="regexp:[a-zA-Z_][a-zA-Z_0-9]*"
        // 通用字符
        WORD="regexp:[^\s:;=\-\"\[\]$#]*"

        // 注解与空白
        SPACE='regexp:\s+'
        COMMENT='regexp://.*'
    ]

    extends("container|literal|reference_expression")=value
    extends("array|object")=container
    extends("string_literal|number_literal|boolean_literal|null_literal")=literal
}
test ::= json

screenplay ::= screenplayConfig? command+

command ::= commandName COLON? mainParam? subParams* SEMICOLON
{
    pin=1
    recoverWhile=cmdRecover
}

private cmdRecover ::= !(SEMICOLON | ALPHABET)

commandName     ::= ALPHABET
mainParam       ::= (NUMBER | ALPHABET | STRING | WORD | json)
subParams       ::= HYPHEN subParamKey [subParamValue]
subParamKey     ::= ALPHABET
subParamValue   ::= EQUALS ((NUMBER | ALPHABET | STRING | WORD | json) | option)

screenplayConfig ::= HASH (ALPHABET | STRING | WORD)? HASH
{
    pin=1
    recoverWhile=screenplayConfig_Recover
}
private screenplayConfig_Recover ::= !(HASH | ALPHABET | SEMICOLON)

// [->target]格式
option ::= optionTarget optionContent
optionTarget ::= L_BRACKET POINT_TO (ALPHABET | STRING | WORD) R_BRACKET
{
    pin=1
    recoverWhile=optionTarget_Recover
}
optionContent ::= (ALPHABET | STRING | WORD)
private optionTarget_Recover ::= !(L_BRACKET | R_BRACKET | optionContent)

variable ::= L_CURLY VAR_PREFIX ALPHABET R_CURLY
{
    pin=VAR_PREFIX
}


// 根规则：允许空文件或包含 JSON 值
json ::= value*

object ::= '{' object_element* '}'
{
  pin=1
}

private object_element ::= property (','|&'}') {
  pin = 1
  recoverWhile = not_brace_or_next_value
}

private property_value ::= value

property ::= property_name (':' property_value)
{
  pin(".*")=1
}

private property_name ::= literal | reference_expression

array ::= '[' array_element* ']'
{
  pin=1
}

private array_element ::= value (','|&']') {
  pin=1
  recoverWhile = not_bracket_or_next_value
}

string_literal ::= SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING
number_literal ::= NUMBER
boolean_literal ::= TRUE | FALSE
null_literal ::= NULL

literal ::= string_literal | number_literal | boolean_literal | null_literal {
  methods=[
    isQuotedString
  ]
  mixin="com.intellij.json.psi.impl.JsonLiteralMixin"
}

fake container ::=

reference_expression ::= ALPHABET

value ::= object | array | literal | reference_expression

// Recoveries
private not_bracket_or_next_value ::= !(']'|value)
private not_brace_or_next_value ::= !('}'|value)

